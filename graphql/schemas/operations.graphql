# AuthFlow

# Getting requestChallenge for startSession Query
query RequestChallenge {
  auth_challenge
}

mutation StartSession($authPubKey: String!, $challenge: String!, $signedAuthPubKey: String!, $walletPubKey: String!, $challengeSignature: String!) {
  start_session_v2(
    authPubKey: $authPubKey
    challenge: $challenge
    challengeSignature: $challengeSignature
    challengeSignatureType: SECP256K1
    signedAuthPubKey: $signedAuthPubKey
    walletPubKey: $walletPubKey
  ) {
    accessToken
    refreshToken
    walletPubKeyId
  }
}

mutation RefreshSession($refreshToken: String!) {
  refresh_session(refreshToken: $refreshToken) {
    accessToken
    refreshToken
  }
}

query PrepareWalletSession($challenge: String!, $signedChallenge: String!, $walletPubKeyId: String!) {
  prepare_wallet_session(challenge: $challenge, ownerPubKeyId: $walletPubKeyId, signature: $signedChallenge)
}

mutation UnlockWallet($challenge: String!, $challengeSignature: String!, $preparedPermissionToken: String!) {
  start_prepared_session(challenge: $challenge, challengeSignature: $challengeSignature, preparedPermissionToken: $preparedPermissionToken, challengeSignatureType: SECP256K1) {
    accessToken
    refreshToken
  }
}

mutation AcceptTermsAndConditionsV2($fingerprint: String!, $service: Service, $version: Int!) {
  accept_terms_conditions_v2(args: {fingerprint: $fingerprint, service: $service, version: $version}) {
    acceptDate
    accepted
    service
    version
  }
}

query GetTermsAndConditionsStatus($serviceProvider: ServiceProviderEnum!) {
  get_terms_conditions_status(args: {service_provider: $serviceProvider}) {
    serviceProvider
    acceptedTerms
    acceptDate
    version
  }
}

# Employee

query GetBusinessOwner($ownerWalletPubKeyId: uuid!) {
  wallet_acl(where: {memberWalletPubKeyId: {_eq: $ownerWalletPubKeyId}}) {
    accessExpiresAt
    ownerWalletPubKeyId
  }
}

# Currency

query GetExchangeRate($code: String!) {
  currency(where: {currencyCode: {_eq: $code }}) {
    currencyCode
    satsPerUnit
  }
}

query GetAllExchangeRates {
  currency {
    currencyCode
    satsPerUnit
    conversionRateUpdatedAt
  }
}


query ListCurrencyCodes {
  currency(order_by: {currencyCode: asc}) {
    currencyCode
  }
}

# topups

mutation RegisterTopup($orderId: String!, $email: String, $referralCode: String){
  register_topup(orderId: $orderId, email: $email, referralCode: $referralCode) {
    walletPubKeyId,
    nodePubKey,
    email,
  }
}

mutation RegisterNotificationToken($language: String!, $notificationToken: String!) {
  register_notification_token(language: $language, notificationToken: $notificationToken) {
    id
  }
}

mutation HideTopup($id: String!) {
  hide_topup(id: $id)
}

query ListUncompletedTopups {
  topup(where: {_or: [{status: {_eq: READY}}, {status: {_eq: FAILED}}, {status: {_eq: REFUNDED}}]}) {
    additionalInfo
    amountSat
    amountUserCurrency
    createdAt
    exchangeFeeRate
    exchangeFeeUserCurrency
    exchangeRate
    expiresAt
    id
    lightningFeeUserCurrency
    lnurl
    nodePubKey
    status
    userCurrency
  }
}

query MigrationBalance($nodePubKey: String) {
  migration_balance(nodePubKey: $nodePubKey) {
    balanceAmountSat
  }
}

mutation MigrateFunds($invoice: String, $base16InvoiceSignature: String, $ldkNodePubKey: String) {
  migrate_funds(invoice: $invoice, base16InvoiceSignature: $base16InvoiceSignature, ldkNodePubKey: $ldkNodePubKey)
}

mutation CreateBackup($encryptedBackup: String!, $schemaName: String!, $schemaVersion: String!) {
  create_backup(encryptedBackup: $encryptedBackup, schemaName: $schemaName, schemaVersion: $schemaVersion) {
    updatedAt
  }
}

mutation RecoverBackup($schemaName: String!) {
  recover_backup(schemaName: $schemaName) {
    encryptedBackup
    schemaVersion
    updatedAt
  }
}

mutation ReportPaymentTelemetry($telemetryId: String!, $events: PaymentTelemetryEventsInput) {
  report_payment_telemetry(telemetryId: $telemetryId, events: $events) {
    payFailed
  }
}

mutation AssignLightningAddress {
  assign_lightning_address {
    address
    assignedAt
  }
}

mutation SubmitLnurlPayInvoice($id: String!, $invoice: String) {
  submit_lnurl_pay_invoice(id: $id, invoice: $invoice)
}

mutation RequestPhoneNumberVerification($encryptedNumber: String!, $number: String!) {
  request_phone_number_verification(encryptedNumber: $encryptedNumber, number: $number)
}

mutation VerifyPhoneNumber($number: String!, $otp: String!) {
  verify_phone_number(number: $number, otp: $otp)
}

query VerifiedPhoneNumber {
  verified_phone_number {
    encryptedPhoneNumber
  }
}

mutation DisableLightningAddresses($addresses: [String!]!) {
  disable_lightning_addresses(addresses: $addresses)
}

mutation EnableLightningAddresses($addresses: [String!]!) {
  enable_lightning_addresses(addresses: $addresses)
}
