# AuthFlow

# Getting requestChallenge for startSession Query
query RequestChallenge {
  auth_challenge
}

mutation StartSession($authPubKey: String!, $challenge: String!, $signedAuthPubKey: String!, $walletPubKey: String!, $challengeSignature: String!) {
  start_session_v2(
    authPubKey: $authPubKey
    challenge: $challenge
    challengeSignature: $challengeSignature
    challengeSignatureType: SECP256K1
    signedAuthPubKey: $signedAuthPubKey
    walletPubKey: $walletPubKey
  ) {
    accessToken
    refreshToken
    walletPubKeyId
  }
}

mutation RefreshSession($refreshToken: String!) {
  refresh_session(refreshToken: $refreshToken) {
    accessToken
    refreshToken
  }
}

query PrepareWalletSession($challenge: String!, $signedChallenge: String!, $walletPubKeyId: String!) {
  prepare_wallet_session(challenge: $challenge, ownerPubKeyId: $walletPubKeyId, signature: $signedChallenge)
}

mutation UnlockWallet($challenge: String!, $challengeSignature: String!, $preparedPermissionToken: String!) {
  start_prepared_session(challenge: $challenge, challengeSignature: $challengeSignature, preparedPermissionToken: $preparedPermissionToken, challengeSignatureType: SECP256K1) {
    accessToken
    refreshToken
  }
}

mutation AcceptCustomTermsAndConditions($serviceProvider: String!) {
  accept_terms_conditions(args: {service_provider: $serviceProvider}) {
    serviceProvider
    acceptedTerms
    acceptDate
  }
}

mutation RegisterNode($nodePubKey: String!){
  register_node(nodePubKey: $nodePubKey) {
    nodePubKey
  }
}

mutation RegisterEmail($email: String!){
  register_email(email: $email) {
    email
  }
}

# Employee

query GetBusinessOwner($ownerWalletPubKeyId: uuid!) {
  wallet_acl(where: {memberWalletPubKeyId: {_eq: $ownerWalletPubKeyId}}) {
    accessExpiresAt
    ownerWalletPubKeyId
  }
}

# Currency

query GetExchangeRate($code: String!) {
  currency(where: {currencyCode: {_eq: $code }}) {
    currencyCode
    satsPerUnit
  }
}

query GetAllExchangeRates {
  currency {
    currencyCode
    satsPerUnit
    conversionRateUpdatedAt
  }
}


query ListCurrencyCodes {
  currency(order_by: {currencyCode: asc}) {
    currencyCode
  }
}

# [mole] Channel state persistence

mutation InsertChannelMonitorOne($channelId: bytea!, $encryptedChannelMonitor: bytea!, $installationId: String!, $encryptedDeviceInfo: bytea!) {
  insert_channel_monitor_one(object: {
        channelId: $channelId,
        encryptedChannelMonitor: $encryptedChannelMonitor,
        installationId: $installationId,
        encryptedDeviceInfo: $encryptedDeviceInfo,
    }) {
      channelId
  }
}

query GetChannelMonitorChannelIds {
  channel_monitor(distinct_on: channelId, order_by: {channelId: desc}) {
    channelId
  }
}

query GetLatestChannelMonitor($channelId: bytea!) {
  channel_monitor(order_by: {timestamp: desc}, where: {channelId: {_eq: $channelId}}, limit: 1) {
    encryptedChannelMonitor
  }
}

mutation InsertChannelManagerOne($encryptedChannelManager: bytea!) {
  insert_channel_manager_one(object: {
        encryptedChannelManager: $encryptedChannelManager,
    }) {
      walletId
  }
}

query GetLatestChannelManager {
  channel_manager(order_by: {timestamp: desc}, limit: 1) {
      encryptedChannelManager,
  }
}
